generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model services {
  id               Int            @id @unique(map: "id") @default(autoincrement())
  name             String?        @db.VarChar(100)
  avatar           String?        @db.VarChar(100)
  type             services_type?
  updated_at       DateTime?      @db.DateTime(0)
  deleted_at       DateTime?      @db.DateTime(0)
  created_at       DateTime       @db.DateTime(0)
  service_category Int?
  sub_services     sub_services[]
}

model vendor {
  id              Int               @id @unique(map: "id") @default(autoincrement())
  first_name      String?           @db.VarChar(10)
  last_name       String?           @db.VarChar(10)
  email           String            @unique(map: "email") @db.VarChar(100)
  city            String?           @db.VarChar(100)
  zip_code        String?           @db.VarChar(8)
  date_of_birth   DateTime?         @db.Date
  gender          vendor_gender?
  password        String            @db.Char(64)
  experience      Int?
  avatar          String?           @db.VarChar(500)
  user_id_front   String?           @db.VarChar(500)
  user_id_back    String?           @db.VarChar(500)
  updated_at      DateTime?         @db.DateTime(0)
  deleted_at      DateTime?         @db.DateTime(0)
  created_at      DateTime          @db.DateTime(0)
  is_online       Boolean           @default(true)
  vendor_jobs     vendor_jobs[]
  vendor_services vendor_services[]
}

model vendor_services {
  id         Int       @id @unique(map: "id") @default(autoincrement())
  vendor_id  Int?
  created_at DateTime  @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  vendor     vendor?   @relation(fields: [vendor_id], references: [id], onDelete: Restrict, map: "vendor_services_ibfk_1")

  @@index([vendor_id], map: "vendor_id")
}

model customers {
  id           Int           @id @default(autoincrement())
  full_name    String?       @db.VarChar(150)
  phone_number String?       @db.VarChar(50)
  zipcode      String?       @db.VarChar(8)
  created_at   DateTime?     @db.DateTime(0)
  avatar       String?       @db.VarChar(500)
  updated_at   DateTime?     @db.DateTime(0)
  deleted_at   DateTime?     @db.DateTime(0)
  password     String?       @db.Char(64)
  email        String        @unique(map: "email") @db.VarChar(50)
  vendor_jobs  vendor_jobs[]
}

model vendor_jobs {
  id              Int                @id @default(autoincrement())
  vendor_id       Int
  customer_id     Int
  status          vendor_jobs_status
  created_at      DateTime?          @db.DateTime(0)
  updated_at      DateTime?          @db.DateTime(0)
  stars           Int?
  comment         String?            @db.Text
  job_images      String?            @db.Text
  location        String?            @db.Text
  description     String             @db.Text
  verdict_at      DateTime?          @db.DateTime(0)
  sub_services_id Int
  sub_services    sub_services       @relation(fields: [sub_services_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vendor_jobs_sub_services1")
  vendor          vendor             @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vendor_jobs_ibfk_1")
  customers       customers          @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vendor_jobs_ibfk_2")

  @@index([customer_id], map: "customer_id")
  @@index([vendor_id], map: "vendor_id")
  @@index([sub_services_id], map: "fk_vendor_jobs_sub_services1_idx")
}

model conversation {
  id          Int       @id @unique(map: "id") @default(autoincrement())
  created_at  DateTime  @db.DateTime(0)
  vendor_id   Int
  customer_id Int
  deleted_at  DateTime? @db.DateTime(0)
}

model messages {
  id              Int      @id @unique(map: "id")
  conversation_id Int
  created_at      DateTime @db.DateTime(0)
  message         String   @db.VarChar(500)
}

model sub_services {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(100)
  avatar      String?       @db.VarChar(100)
  services_id Int
  created_at  String?       @db.VarChar(45)
  updated_at  String?       @db.VarChar(45)
  services    services      @relation(fields: [services_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sub_services_services1")
  vendor_jobs vendor_jobs[]

  @@index([services_id], map: "fk_sub_services_services1_idx")
}

enum services_type {
  urgent
  scheduled
}

enum vendor_gender {
  MALE
  FEMALE
  NOT_SPECIFIED @map("NOT SPECIFIED")
}

enum vendor_jobs_status {
  pending
  started
  reached
  done
  cancelled
}
